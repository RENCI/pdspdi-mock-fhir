openapi: 3.0.0
info:
  version: '1'
  title: 'mock FHIR'
  description: 'mock FHIR'
paths:
  /config:
    get:
      operationId: api.get_config
      responses:
        200:
          description: success operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
  /resource:
    delete:
      operationId: api.delete_resource
      responses:
        200:
          description: success operation
  /Bundle:
    post:
      operationId: api.post_bundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bundle"
      responses:
        200:
          description: success operation
  /Patient/{patient_id}:
    get:
      operationId: api.get_patient
      parameters:
        - name: patient_id
          example: 38
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: success operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Patient"
        404:
          description: resource not found
  /Patient:
    post:
      operationId: api.post_patient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patient"
      responses:
        200:
          description: success operation
  /Observation:
    get:
      operationId: api.get_observation
      parameters: 
        - name: patient
          in: query
          required: true
          schema:
            type: string
          example: 1
      responses:
        200:
          description: success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Observation"
    post:
      operationId: api.post_observation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Observation"
      responses:
        200:
          description: success operation
  /Condition:
    get:
      operationId: api.get_condition
      parameters: 
        - name: patient
          in: query
          required: true
          schema:
            type: string
          example: 1
      responses:
        200:
          description: success operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Condition"
    post:
      operationId: api.post_condition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condition'
      responses:
        200:
          description: success operation
components:
  schemas:
    Config:
      type: object
      required:
        - piid
        - pluginType
      properties:
        piid:
          type: string
          description: >-
            A string, unique to this deployment, used to identify this plugin in
            realtime
          example: pdspi-mapper-DOAC
        title:
          type: string
          description: Meaningful name for this plugin
          example: DOAC variable mapper
        enabled:
          type: boolean
          description: >-
            Admin can 'disable' this plugin, and if so, prevent it from being
            chosen on any client or dashboard.
          example: true 
        pluginDependencies:
          type: array
          items:
            type: string
            description: >-
              An array of container names upon which the plugin in question
              depends. For example, 'txscience/pds-fhir-example:0.2.0'. Mapper
              plugins must indicate a dependency on one or more FHIR plugins,
              but dependencies are discouraged otherwise in order to maintain
              the decoupling and reuse of plugins. Every plugin of type 'm' and
              'mD' must have at least one 'f' or 'fD' plugin listed in
              pluginDependencies, otherwise return 500.
        pluginType:
          type: string
          enum:
            - g
            - m
            - f
            - fD
            - mD
          description: >-
            A value identifying the plugin type. 
            'g'=Guidance, 'c'=Convenience, 'm'=Mapper, 'f'=FHIR, 'mD'= Default Mapper, 'fD'=Default FHIR. In 
            the clinical arena, only one FHIR server and only one mapper is 
            allowed, and this can be indicated either with the defaults, or by 
            only installing one mapper and one FHIR plugin type.
          example: m
        pluginTypeTitle:
          type: string
          enum:
            - Guidance
            - Mapper
            - FHIR
            - Default FHIR
            - Default Mapper
          description: >-
            A human-readable value for the type. 'g'=Guidance, 'c'=Convenience, 
            'm'=Mapper, 'f'=FHIR, 'mD'=Default Mapper, 'fD'=Default FHIR
        settingsDefaults:
          $ref: '#/components/schemas/Settings'
    Settings:
      type: object
      description: >-
        Used for specifying factory defaults, admin over-ride defaults,
        user-over-ride input values, and ultimately the values that the plugin
        will use, or reports as having used.
      properties:
        pluginSelectors:
          description: >-
            Maps the piid to a set of selector values. Potentially, a decision tree could be
            implemented here by prefacing each selectorarray item with logic,
            but for this API version we will instead always AND all the selector
            array elements. For example, 'if guidance is requried for drug _x_
            AND indication _y_ then use plugin _z_'.
          type: array
          items:
            $ref: '#/components/schemas/PluginSelector'
          example:
            - id: dosing.rxCUI
              title: Drug
              legalValues:
                type: string
                enum:
                  - value: 'rxCUI:1596450'
                    title: Gentamicin
                  - value: 'rxCUI:1723160'
                    title: Amikacin
              selectorValue:
                value: 'rxCUI:1596450'
                title: Amikacin
        modelParameters:
          description: >-
            Default, typed values for any parameters that might be required by
            the plugin
          type: array
          items:
            $ref: '#/components/schemas/PluginParameter'
          example:
            - id: 'pdspi-guidance-example:1'
              title: Extended interval nomogram
              parameterDescription: >-
                This calculator uses one of four extended-interval nomograms.
                Please choose one nomogram.
              legalValues:
                type: string
                enum:
                  - Hartford
                  - Urban-Craig
                  - Conventional A
                  - Conventional B
              parameterValue:
                value: Hartford
        patientVariables:
          type: array
          items:
            $ref: '#/components/schemas/PatientVariable'
          example:
            - id: 'LOINC:30525-0'
              certitude: 1
              how: The value was specified by the end user.
              title: Age
              variableValue:
                value: '.5'
                units: years
              why: >-
                Age is used to calculate the creatinine clearance. Dosing is
                lower for geriatric patient and contraindicated for pediatric
                patients
              legalValues:
                type: number
                minimum: '0'
        timestamp:
          description: 'If absent, defaults to current time. Can be overridden by patientVariables timestamp value on a variable-by-variable basis.'
          type: string
          format: date-time
          example: '2019-12-03T13:41:09.942+00:00'
    PatientVariable:
      description: >-
        Used to specify EHR patient values as well as user-supplied overrides of
        those EHR values, and/or user-supplied replacements for values missing
        in the EHR.
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: >-
            The id for one of the patient variables supported by this PDS
            version. The client has the option of ignoring this variable if it
            doesn't recognize the id, but if another plugin requires this variable, 
            then the user won't have the option of overriding it if the client ignores it.
            Stylistically, community standard coding system used for this type will 
            preface the code used, e.g., LOINC:3025-0, ICD10:R53, HP:0000819, rxCUI:1596450, etc.
          example: 'LOINC:30525-0'
        certitude:
          type: integer
          description: >-
            The certitude of the value, 0 not certain, 1 somewhat certain, 2
            certain. User-supplied values will always be '2' to avoid personal 
            bias in reporting certitude, with the assumption that human error 
            will be intercepted, and human intelligence overrides algorithm outputs.
          example: 2
        variableDescription:
          type: string
          description: >-
            Description of the patient variable can optionally be set by the plugin. Patient
            variable descriptions should describe the variable precisely; for
            example, rather than say simply 'BMI',the variable might be
            described as 'nearest BMI prior to intervention', or
            'comma-delimited list of {BMI,date} objects for the patient with a
            given study period, as defined by the 'study-start', 'study-end'
            model parameters'. The comprehensive list of supported patient variables is tied to
            the PDS release. 
          example: "The age is determined by subtracting the birthdate from the current time. Also known as 'chronological age' or 'Post Natal Age' (PNA). Specified as somen fraction of years, convention."
        how:
          type: string
          description: >-
            A value of 'The value was specified by the end user.' indicates
            that the EHR value (whether or not it was missing in the EHR)
            has been overriden by the client.
          example: The value was specified by the end user.
        title:
          type: string
          description: >-
            A non-standardized, human-readable string to describe the id. May be
            implemented by the PDS to aid in debugging, clients should not
            depend on this value.
          example: Age
        variableValue:
          description: >-
            The type for the variableValue is defined by the legalValues, and thus is
            the client informed on how to render the variableValue. The
            variableValue may also include the 'units' field, which is optional,
            and if left off, implies the system default units. It's up to the
            guidance plugin to make unit conversions as needed by the guidance
            model, just as it is up to the dashboard to make unit conversions as
            needed by the end user. NOTE: The 'variableValue' is actually an object 
            type, but we use 'string' here to overcome a shortcoming of the swagger 
            ui. This design choice was made in order to prioritize a better 
            interactive documentation experience for the API user.
          type: object
          example:
            value: '0.5'
            units: years
        why:
          type: string
          description: >-
            Provides the client with a human-readable, non-standard
            justification for why the plugin needs this particular variable.
            This can be rendered by the client to provide the end-user with
            rationale for the patient values, but does not address how the value
            was computed.
          example: >-
            Age is used to calculate the creatinine clearance. Dosing is lower
            for geriatric patient and contraindicated for pediatric patients
        legalValues:
          type: string
          description: >-
            If absent, all values are legal, so treat the value like a string.
            Use the JSON schema,
            https://json-schema.org/draft/2019-09/json-schema-validation.html.
            For example, { type: 'string', 'enum': [ 'Gentamicin', 'Amikacin' ]
            } to define an enumeration,  { 'type': 'number' } for a float, and {
            'type': 'number', 'minimum': '0' } for a positive number, and {
            'type': 'integer' } for an integer. NOTE: This value is
            actually an object type, but we use 'string' here to overcome a
            shortcoming of the swagger ui. This design choice was made in order
            to prioritize a better interactive documentation experience for the
            API user. 
          example:
            type: number
            minimum: '0'
        group:
            type: string
            description: >-
              A 'tag' for grouping semantically similar variables. Used to inform
              the client on how to render many patient variables, e.g., 'Symptom', 
              'Profile', 'Pre-existing condition'. Can be safely ignored by client.
            example: "Patient variable"
        timestamp:
          type: string
          description: >-
            The time used to compute the patient variable. For example, this could be the current time if a patient is presenting for treatment, or in a retrospective study, it could be an intervention date, or any date within the retrospective study timeframe.
          format: date-time
          example: "2020-07-01T14:29:15.453Z"
    PluginParameter:
      type: object
      description: Used for specifying factory defaults, admin over-ride defaults,
        user-over-ride input values, and ultimately the values that the plugin
        will use, or reports as having used, to parameterize models.
      required:
        - id
        - parameterValue
      properties:
        id:
          type: string
          description: >-
            The id for one of the parameters used by the plugin in question.
            Parameters are completely defined by the plugin and need not be
            interchangable with other plugins. The client will have no prior
            knowledge for plugin parameters.
          example: 'pdspi-guidance-example:1'
        title:
          type: string
          description: >-
            A non-standardized, human-readable string to describe the id. May be
            implemented by the PDS to aid in debugging, clients should not
            depend on this value.
          example: Extended interval nomogram
        parameterDescription:
          type: string
          description: >-
            A precise description of the parameter, provided by the plugin requiring
            the parameter. This description can be served by the client to  guide the
            user in overriding default parameter values. Plugins should consider using
            a message catalog to hold parameterDescription strings in order to 
            facilitate internationalization.
          example: >-
            This calculator uses one of four extended-interval nomograms. Please
            choose one nomogram.
        parameterValue:
          type: object
          description: >-
            The actual value of the parameter. NOTE: This value is actually an object type, but
            we use 'string' here to overcome a shortcoming of the swagger ui.
            This design choice was made in order to prioritize a better
            interactive documentation experience for the API user.
          example:
            value: Hartford
        legalValues:
          type: object
          description: >-
            If absent, all values are legal, so treat the value like a string.
            Use the JSON schema,
            https://json-schema.org/draft/2019-09/json-schema-validation.html.
            For example, { type: 'string', 'enum': [ 'Gentamicin', 'Amikacin' ]
            } to define an enumeration,  { 'type': 'number' } for a float, and {
            'type': 'number', 'minimum': '0' } for a positive number, and {
            'type': 'integer' } for an integer. NOTE: This value is actually an
            object type, but we use 'string' here to overcome a shortcoming of
            the swagger ui. This design choice was made in order to prioritize a
            better interactive documentation experience for the API user. 
          example:
            type: string
            enum:
              - Hartford
              - Urban-Craig
              - Conventional A
              - Conventional B
    PluginSelector:
      type: object
      description: >-
        Used for selecting plugins. For example, a selector that provides the
        value of a drug class informs what type of guidance plugin is required,
        or an URL to a FHIR server informs FHIR server/mapper plugin combination
        to use.
      required:
        - id
      properties:
        id:
          type: string
          description: >-
            The client should have prior knowledge of the full list of selectors
            available with this version of the mapper. This unique id is used to
            determine which selector type is described. Stylistically, the id will
            end in the community standard coding system used for this type, e.g.,
            FHIR.URI, dosing.rxCUI. But not always, e.g., PDS:sars is a selector 
            for choosing guidance for treatement vs capacity.
          example: FHIR.URI
        legalValues:
          type: object
          description: >-
            If absent, all values are legal, so treat the value like a string.
            Use the JSON schema,
            https://json-schema.org/draft/2019-09/json-schema-validation.html.
            For example, { type: 'string', 'enum': [ 'Gentamicin', 'Amikacin' ]
            } to define an enumeration,  { 'type': 'number' } for a float, and {
            'type': 'number', 'minimum': '0' } for a positive number, and {
            'type': 'integer' } for an integer. Furthermore, a non-standard
            'title' can be added in support of a human-readable string for the
            type's value. This maybe be implemented by the PDS to aid in
            debugging, however clients should not depend on this value. NOTE:
            This value is actually an object type, but we use 'string' here to
            overcome a shortcoming of the swagger ui. This design choice was
            made in order to prioritize a better interactive documentation
            experience for the API user.
          example:
            type: string
            enum:
              - value: 'urn://cdwh.nctracs.v1'
                title: NCTraCS Carolina Data Warehouse
              - value: 'http://hapi.fhir.org/baseR4'
              - value: 'https://open-ic.epic.com/FHIR/api/FHIR/DSTU2'
        selectorValue:
          type: string
          description: >-
            The title in the example is optional. NOTE: This value is actually an object type, but we use
            'string' here to overcome a shortcoming of the swagger ui. This
            design choice was made in order to prioritize a better interactive
            documentation experience for the API user. 
          example:
            value: 'http://hapi.fhir.org/baseR4'
            title: Hapi FHIR base URL
        title:
          type: string
          example: FHIR URI - an URL (locator) or an URN (unique name)
          description: Human-readable name for this selector type.
    Bundle:
      type: object
      properties:
        entry:
          type: array
          items:
            type: object
            properties:
              resource:
                anyOf:
                  - $ref: '#/components/schemas/Patient'
                  - $ref: '#/components/schemas/Observation'
                  - $ref: '#/components/schemas/Condition'
            required: ["resource"]
      required: ["entry"]
      example:
        entry:
          - resource:
              id: "1"
              resourceType: Patient
          - resource:
              resourceType: Observation
              subject:
                reference: Patient/1
          - resource:
              resourceType: Condition
              subject:
                reference: Patient/1
    Patient:
      type: object
      properties:
        id:
          type: string
          example: 38
        resourceType:
          type: string
          example: "Observation"
      required: ["id", "resourceType"]
      example:
        id: "1"
        resourceType: Patient
    Observation:
      type: object
      properties:
        resourceType:
          type: string
        subject:
          type: object
          properties:
            reference:
              type: string
          required: ["reference"]
      required: ["resourceType", "subject"]
      example:
        resourceType: Observation
        subject:
          reference: Patient/1
    Condition:
      type: object
      properties:
        resourceType:
          type: string
        subject:
          type: object
          properties:
            reference:
              type: string
          required: ["reference"]
      required: ["resourceType", "subject"]
      example:
        resourceType: Condition
        subject:
          reference: Patient/1
